diff -r cb13feb73a05 src/org/python/core/PyArray.java
--- a/src/org/python/core/PyArray.java	Thu Apr 23 07:49:39 2015 -0600
+++ b/src/org/python/core/PyArray.java	Sun Apr 26 17:06:38 2015 -0400
@@ -1231,6 +1231,9 @@ public class PyArray extends PySequence 
         if ("u".equals(typecode)) {
             return new PyUnicode(Array.getInt(data, i));
         }
+        if (type == Integer.TYPE) {
+            return Py.newInteger(((int[])data)[i]);
+        }        
         return Py.java2py(Array.get(data, i));
     }
 
@@ -1614,17 +1617,8 @@ public class PyArray extends PySequence 
                 throw Py.OverflowError("value too large for " + type.getName());
             }
         } else if (type == Integer.TYPE) {
-            long val;
-            try {
-                val = ((Long)value.__tojava__(Long.TYPE)).longValue();
-            } catch (ClassCastException e) {
-                throw Py.TypeError("Type not compatible with array type");
-            }
-            if (val < (isSigned() ? 0 : Integer.MIN_VALUE)) {
-                throw Py.OverflowError("value too small for " + type.getName());
-            } else if (val > Integer.MAX_VALUE) {
-                throw Py.OverflowError("value too large for " + type.getName());
-            }
+            Array.setInt(data, i, value.asInt());
+            return;
         } else if (type == Long.TYPE) {
             if (isSigned() && value instanceof PyInteger) {
                 if (((PyInteger)value).getValue() < 0) {
diff -r cb13feb73a05 src/org/python/core/PyInteger.java
--- a/src/org/python/core/PyInteger.java	Thu Apr 23 07:49:39 2015 -0600
+++ b/src/org/python/core/PyInteger.java	Sun Apr 26 17:06:38 2015 -0400
@@ -258,6 +258,9 @@ public class PyInteger extends PyObject 
 
     @ExposedMethod(type = MethodType.CMP, doc = BuiltinDocs.int___cmp___doc)
     final int int___cmp__(PyObject other) {
+        if (other instanceof PyLong) {
+            return -((PyLong) other).__cmp__(this);
+        }
         if (!canCoerce(other)) {
             return -2;
         }
@@ -284,13 +287,16 @@ public class PyInteger extends PyObject 
     }
 
     private static final boolean canCoerce(PyObject other) {
-        return other instanceof PyInteger;
+        return other instanceof PyInteger || other instanceof PyLong;
     }
 
     private static final int coerce(PyObject other) {
         if (other instanceof PyInteger) {
             return ((PyInteger)other).getValue();
         }
+        if (other instanceof PyLong) {
+            return other.asInt();
+        }
         throw Py.TypeError("xxx");
     }
 
diff -r cb13feb73a05 src/org/python/core/PyLong.java
--- a/src/org/python/core/PyLong.java	Thu Apr 23 07:49:39 2015 -0600
+++ b/src/org/python/core/PyLong.java	Sun Apr 26 17:06:38 2015 -0400
@@ -277,14 +277,17 @@ public class PyLong extends PyObject {
 
     @Override
     public int asInt(int index) {
-        return (int)getLong(Integer.MIN_VALUE, Integer.MAX_VALUE,
-                "long int too large to convert to int");
+        return asInt();
     }
 
+    /**
+     * This is different from Jython, in that it silently throws away bits
+     * downcasts to int, rather than throwing an exception if there are too
+     * many bits to convert to an  int losslessly.
+     */
     @Override
     public int asInt() {
-        return (int)getLong(Integer.MIN_VALUE, Integer.MAX_VALUE,
-                "long int too large to convert to int");
+        return value.intValue();
     }
 
     @Override
@@ -302,7 +305,7 @@ public class PyLong extends PyObject {
                 return new Short((short)getLong(Short.MIN_VALUE, Short.MAX_VALUE));
             }
             if (c == Integer.TYPE || c == Integer.class) {
-                return new Integer((int)getLong(Integer.MIN_VALUE, Integer.MAX_VALUE));
+                return new Integer(asInt());
             }
             if (c == Long.TYPE || c == Long.class) {
                 return new Long(getLong(Long.MIN_VALUE, Long.MAX_VALUE));
@@ -365,7 +368,7 @@ public class PyLong extends PyObject {
         if (other instanceof PyLong) {
             return ((PyLong)other).getValue();
         } else if (other instanceof PyInteger) {
-            return BigInteger.valueOf(((PyInteger)other).getValue());
+            return BigInteger.valueOf(((PyInteger) other).getValue() & 0xFFFFFFFFL);
         } else {
             throw Py.TypeError("xxx");
         }
